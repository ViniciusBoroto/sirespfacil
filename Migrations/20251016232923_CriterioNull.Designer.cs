// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SirespFacil.Data;

#nullable disable

namespace SirespFacil.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251016232923_CriterioNull")]
    partial class CriterioNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("Exame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("CaminhosArquivos")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Data")
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoId");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("ExameRessonanciaMagnetica", b =>
                {
                    b.Property<int>("ExamesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RessonanciaMagneticasId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExamesId", "RessonanciaMagneticasId");

                    b.HasIndex("RessonanciaMagneticasId");

                    b.ToTable("ExameRessonanciaMagnetica");
                });

            modelBuilder.Entity("SirespFacil.Models.ClassificacaoAsa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Classificacao")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ClassificacaoAsa");
                });

            modelBuilder.Entity("SirespFacil.Models.Conduta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Condutas");
                });

            modelBuilder.Entity("SirespFacil.Models.CriterioDeAutorizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CaminhoArquivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TipoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TipoId");

                    b.ToTable("CriteriosDeAutorizacao");
                });

            modelBuilder.Entity("SirespFacil.Models.ExameSolicitado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassificacaoAsaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exame")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LateralidadeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RessonanciaMagneticaId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Sedacao")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassificacaoAsaId");

                    b.HasIndex("LateralidadeId");

                    b.HasIndex("RessonanciaMagneticaId");

                    b.ToTable("ExameSolicitados");
                });

            modelBuilder.Entity("SirespFacil.Models.ImplanteMetalico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Dispositivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RessonanciaMagneticaId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("TempoDeUso")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RessonanciaMagneticaId");

                    b.ToTable("ImplantesMetalicos");
                });

            modelBuilder.Entity("SirespFacil.Models.Justificativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Justificativas");
                });

            modelBuilder.Entity("SirespFacil.Models.Lateralidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lateralidades");
                });

            modelBuilder.Entity("SirespFacil.Models.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("SirespFacil.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodigoSIRESP")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<int>("Idade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SexoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SexoId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("SirespFacil.Models.RessonanciaMagnetica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Altura")
                        .HasColumnType("REAL");

                    b.Property<string>("CIDCausasAssociadas")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CIDPrincipal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CIDSecundario")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("CircunferenciaAbdominal")
                        .HasColumnType("REAL");

                    b.Property<int>("CondutaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CriterioDeAutorizacaoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescricaoDiagnostico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("JustificativaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OutroExame")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PacienteId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Peso")
                        .HasColumnType("REAL");

                    b.Property<int?>("SolicitanteId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ValorCreatinina")
                        .HasColumnType("REAL");

                    b.Property<double>("ValorUreia")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CondutaId");

                    b.HasIndex("CriterioDeAutorizacaoId")
                        .IsUnique();

                    b.HasIndex("JustificativaId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("SolicitanteId");

                    b.ToTable("RessonanciasMagneticas");
                });

            modelBuilder.Entity("SirespFacil.Models.Sexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sexo");
                });

            modelBuilder.Entity("SirespFacil.Models.Solicitante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MedicoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MedicoId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Solicitantes");
                });

            modelBuilder.Entity("SirespFacil.Models.TipoCriterioAutorizacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TiposCriterioAutorizacao");
                });

            modelBuilder.Entity("SirespFacil.Models.TipoExame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TiposExames");
                });

            modelBuilder.Entity("SirespFacil.Models.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NIR")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("Exame", b =>
                {
                    b.HasOne("SirespFacil.Models.TipoExame", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("ExameRessonanciaMagnetica", b =>
                {
                    b.HasOne("Exame", null)
                        .WithMany()
                        .HasForeignKey("ExamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SirespFacil.Models.RessonanciaMagnetica", null)
                        .WithMany()
                        .HasForeignKey("RessonanciaMagneticasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SirespFacil.Models.CriterioDeAutorizacao", b =>
                {
                    b.HasOne("SirespFacil.Models.TipoCriterioAutorizacao", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("SirespFacil.Models.ExameSolicitado", b =>
                {
                    b.HasOne("SirespFacil.Models.ClassificacaoAsa", "ClassificacaoAsa")
                        .WithMany()
                        .HasForeignKey("ClassificacaoAsaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SirespFacil.Models.Lateralidade", "Lateralidade")
                        .WithMany()
                        .HasForeignKey("LateralidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SirespFacil.Models.RessonanciaMagnetica", "RessonanciaMagnetica")
                        .WithMany("ExamesSolicitados")
                        .HasForeignKey("RessonanciaMagneticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassificacaoAsa");

                    b.Navigation("Lateralidade");

                    b.Navigation("RessonanciaMagnetica");
                });

            modelBuilder.Entity("SirespFacil.Models.ImplanteMetalico", b =>
                {
                    b.HasOne("SirespFacil.Models.RessonanciaMagnetica", "RessonanciaMagnetica")
                        .WithMany("ImplantesMetalicos")
                        .HasForeignKey("RessonanciaMagneticaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RessonanciaMagnetica");
                });

            modelBuilder.Entity("SirespFacil.Models.Paciente", b =>
                {
                    b.HasOne("SirespFacil.Models.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sexo");
                });

            modelBuilder.Entity("SirespFacil.Models.RessonanciaMagnetica", b =>
                {
                    b.HasOne("SirespFacil.Models.Conduta", "Conduta")
                        .WithMany()
                        .HasForeignKey("CondutaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SirespFacil.Models.CriterioDeAutorizacao", "CriterioDeAutorizacao")
                        .WithOne("RessonanciaMagnetica")
                        .HasForeignKey("SirespFacil.Models.RessonanciaMagnetica", "CriterioDeAutorizacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SirespFacil.Models.Justificativa", "Justificativa")
                        .WithMany()
                        .HasForeignKey("JustificativaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SirespFacil.Models.Paciente", "Paciente")
                        .WithMany("RessonanciaMagneticas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SirespFacil.Models.Solicitante", "Solicitante")
                        .WithMany("RessonanciaMagneticas")
                        .HasForeignKey("SolicitanteId");

                    b.Navigation("Conduta");

                    b.Navigation("CriterioDeAutorizacao");

                    b.Navigation("Justificativa");

                    b.Navigation("Paciente");

                    b.Navigation("Solicitante");
                });

            modelBuilder.Entity("SirespFacil.Models.Solicitante", b =>
                {
                    b.HasOne("SirespFacil.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SirespFacil.Models.Unidade", "Unidade")
                        .WithMany()
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("SirespFacil.Models.CriterioDeAutorizacao", b =>
                {
                    b.Navigation("RessonanciaMagnetica")
                        .IsRequired();
                });

            modelBuilder.Entity("SirespFacil.Models.Paciente", b =>
                {
                    b.Navigation("RessonanciaMagneticas");
                });

            modelBuilder.Entity("SirespFacil.Models.RessonanciaMagnetica", b =>
                {
                    b.Navigation("ExamesSolicitados");

                    b.Navigation("ImplantesMetalicos");
                });

            modelBuilder.Entity("SirespFacil.Models.Solicitante", b =>
                {
                    b.Navigation("RessonanciaMagneticas");
                });
#pragma warning restore 612, 618
        }
    }
}
